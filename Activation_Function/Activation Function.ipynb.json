{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "suited-conference",
   "metadata": {},
   "source": [
    "# SIGMOID"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "becoming-november",
   "metadata": {},
   "outputs": [],
   "source": [
    "import math\n",
    "def sigmoid(x) :\n",
    "    return 1/(1+math.exp(-x)) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "otherwise-things",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(1.0, 0.9999546021312976)"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sigmoid(50), sigmoid(10) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "hindu-theta",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.5"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sigmoid(0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "guided-stewart",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(4.5397868702434395e-05, 1.928749847963918e-22)"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sigmoid(-10), sigmoid(-50)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "recent-infection",
   "metadata": {},
   "source": [
    "This SIGMOID Function converts any number between 0 to 1"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "legitimate-blocking",
   "metadata": {},
   "source": [
    "# TANH"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "spatial-tumor",
   "metadata": {},
   "outputs": [],
   "source": [
    "def tanh(x) :\n",
    "    return (math.exp(x) - math. exp(-x)) /(math.exp(x) +math.exp(-x)) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "compound-opportunity",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(0.7615941559557649, 1.0)"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "tanh(1) , tanh(100)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "typical-feature",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.0"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "tanh(0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "inappropriate-employee",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(-0.9999999958776926, -1.0)"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "tanh(-10), tanh(-100)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cooked-smile",
   "metadata": {},
   "source": [
    "This TANH Function converts any number between -1 to 1."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "employed-father",
   "metadata": {},
   "source": [
    "# RELU"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "bearing-vertical",
   "metadata": {},
   "outputs": [],
   "source": [
    "def relu(x) :\n",
    "    return max(0, x) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "stopped-topic",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(10, 0.0054, 1)"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "relu(10) , relu(0.0054) , relu(1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "eastern-finding",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "relu(0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "muslim-faith",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(0, 0)"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "relu(-10) , relu(-0.54)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "activated-residence",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "cardiac-wisdom",
   "metadata": {},
   "source": [
    "# LEAKY RELU"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "parallel-pulse",
   "metadata": {},
   "outputs": [],
   "source": [
    "def leaky_relu(x) :\n",
    "    return max(0.1*x, x) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "european-france",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(1, 10)"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "leaky_relu(1), leaky_relu(10) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "sharing-executive",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.0"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "leaky_relu(0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "judicial-newport",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(-1.0, -1.5)"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "leaky_relu(-10), leaky_relu(-15)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "animal-casting",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
